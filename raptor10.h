/*
 *  Copyright 2019 Roberto Francescon
 *  This file is part of freeRaptor.
 *
 *  freeRaptor is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  freeRaptor is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with freeRaptor.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @author  Roberto Francescon
 * @brief   Definition of fields, structures and functions for the
 *          implementation of Raptor10 FEC codes
 * @version 0.0.1
 * @file    raptor10.h
 */

#ifndef RAPTOR10_H
#define RAPTOR10_H

#include <stdint.h>
#include <stdlib.h>

#include <gf2matrix.h>
#include <raptor_consts.h>

/** Encoding symbol ID */
uint16_t ESI;

extern uint16_t S;
extern uint16_t K;
extern uint16_t H;

/** Type symbols is a Raptor 10 symbol: a K bytes array*/
typedef uint8_t* Symbol;

/**
 * Struct for the FEC Payload ID
 * - SBN Source Block Number
 * - ESI Encoding Symbol ID
 */
struct __attribute__((__packed__)) FEC_Payload_ID
{
  uint16_t SBN;
  uint16_t ESI;
};

/**
 * Struct for the Common OTI
 * - F Tranfer length
 * - Reserved field: not used
 * - Encodign Symbol ID
 */
typedef struct __attribute__((__packed__)) Common_OTI
{
  uint32_t F;
  uint8_t Reserved;
  uint8_t N;
} Common_OTI;

/**
 * Struct for the Specific OTI
 * - Z The number of source blocks
 * - N The number of sub-blocks
 * - Al Alignment parameter
 */
typedef struct __attribute__((__packed__)) Specific_OTI
{
  uint16_t Z;
  uint8_t N;
  uint8_t Al;
} Specific_OTI;

/**
 * Struct for the whole OTI (Object Transmission Information) information
 * - c_oti Common Object Transmission Information
 * - s_oti Scheme-specific Object Transmission Information
 */
typedef struct __attribute__((__packed__)) OTI
{
  Common_OTI* c_oti;
  Specific_OTI* s_oti;
} OTI;

/**
 * Struct for the R10 complete packet
 */
typedef struct __attribute__((__packed__)) R10
{
  OTI* oti;
  uint32_t T; /** Symbol size */
  uint8_t* s;
} R10;

/**
 * Factorial function
 * @param n number of which to make the factorial
 */
int factorial(int n);

/**
 * Choose: binomial choosing among numbers
 * @param i first number
 * @param i second number
 */
int choose(int i, int j);

/**
 * Rand function generate pseudo-random numbers
 * The output is an integer between 0 and m-1. V0 and V1 are arrays of 4-bytes
 * values.
 */
uint16_t Rand(uint16_t X, uint16_t i, uint16_t m);

/**
 * Random degree generation
 * @param v selector ft the degree
 */
uint16_t Deg(int v);

/**
 * Funtion that implements the triple generator as specified in RFC 5053
 * @param K number of source symbols 
 * @param X encoding symbolm ID
 * @param triple return array parameter
 */
void Trip(uint16_t K, uint16_t X, uint16_t triple[3]);

/**
 * Core oncoding function as specified by RFC5053
 * @param K number of source symbols
 * @param C array of intermediate symbols
 * @param triple triple generated by function Trip()
 */
void LTEnc(uint16_t K, uint16_t* C, uint16_t triple[3]);

/**
 * Function that buils the LDPC matrix
 * 
 */
int build_LDPC_mat(int K, int S, Symbol* C);

/**
 * Function that builds the Half matrix
 */
int build_Half_mat(int K, int H, int S, Symbol* C);

/**
 * Function that builds the Constraints matrix
 */
int build_constraints_mat();

/**
 * Functions that builds the LT matrix
 */
int build_LT_mat(uint8_t K, uint8_t S, uint8_t H);

#endif
